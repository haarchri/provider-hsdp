/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceObservation struct {

	// The expiration date of the service credentials.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The organization this service falls under. Relationship established through application.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// The service ID
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type ServiceParameters struct {

	// The application ID this service falls under.
	// +crossplane:generate:reference:type=Application
	// +crossplane:generate:reference:refFieldName=ApplicationRef
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Selector for a Application to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// Reference to a Application to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationRef *v1.Reference `json:"applicationRef,omitempty" tf:"-"`

	// Default scopes. You do not have to specify these explicitly when requesting a token.
	// +kubebuilder:validation:Required
	DefaultScopes []*string `json:"defaultScopes" tf:"default_scopes,omitempty"`

	// The service description.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// List of supported scopes for this service.
	// +kubebuilder:validation:Required
	Scopes []*string `json:"scopes" tf:"scopes,omitempty"`

	// Sets the certificate validity. When not specified, the certificate will have a validity of 5 years.
	// +kubebuilder:validation:Optional
	SelfManagedExpiresOn *string `json:"selfManagedExpiresOn,omitempty" tf:"self_managed_expires_on,omitempty"`

	// RSA private key in PEM format. When provided, overrides the generated certificate / private key combination of the IAM service. This gives you full control over the credentials. When not specified, a private key will be generated by IAM.
	// +kubebuilder:validation:Optional
	SelfManagedPrivateKeySecretRef *v1.SecretKeySelector `json:"selfManagedPrivateKeySecretRef,omitempty" tf:"-"`

	// Access Token Lifetime (in seconds). Default: 1800 (30 minutes), Maximum: 2592000 (30 days).
	// +kubebuilder:validation:Optional
	TokenValidity *float64 `json:"tokenValidity,omitempty" tf:"token_validity,omitempty"`

	// The validity of the service credentials in months.
	// +kubebuilder:validation:Optional
	Validity *float64 `json:"validity,omitempty" tf:"validity,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hsdp}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec"`
	Status            ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
